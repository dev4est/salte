<?php/** * Created by PhpStorm. * User: user * Date: 25.04.18 * Time: 15:55 */namespace Communitys {    use Simpla;    /**     * @property mixed|null db     */    class Topic extends Simpla    {        /**         * @param $filter         * @return mixed         */        public function getTopics($filter)        {            if(isset($filter['community_id']))                $community_id = $this->db->placehold('AND ct.community_id=?', intval($filter['community_id']));            $query = /** @lang text */                "SELECT ct.id, ct.name, ct.text, ct.date FROM __communitys_topic as ct WHERE 1 $community_id ORDER BY ct.date DESC";            $this->db->query($query);            return $this->db->results();        }        public function getTopic($filter)        {            if(isset($filter['id']))                $id = $this->db->placehold('AND ct.id=?', intval($filter['id']));            $query = /** @lang text */                "SELECT ct.id, ct.name, ct.text, ct.date, ct.start_date, ct.end_date FROM __communitys_topic as ct WHERE 1 $id LIMIT 1";            $this->db->query($query);            return $this->db->result();        }        public function update_topic($id, $param)        {            $query = $this->db->placehold("UPDATE __communitys_topic SET ?% WHERE id in (?@) LIMIT ?", $param, (array)$id, count((array)$id));            if($this->db->query($query))                return $id;            else                return false;        }        public function getComments($filter)        {            $limit = 10;            $page = 1;            if(isset($filter['topic_id']))                $topic_id = $this->db->placehold('AND ct.topic_id=?', intval($filter['topic_id']));            if(isset($filter['parent_id']))                $parent_id = $this->db->placehold('AND ct.parent_id=?', intval($filter['parent_id']));            if(isset($filter['limit']))                $limit = max(1, intval($filter['limit']));            if(isset($filter['page']))                $page = max(1, intval($filter['page']));            $sql_limit = $this->db->placehold(' LIMIT ?, ? ', ($page-1)*$limit, $limit);            $query = /** @lang text */                "SELECT ct.id, ct.parent_id, ct.topic_id, u.id as user_id, ct.text, ct.create_date as date  , u.username, u.surname, u.image                         FROM __communitys_topic_comment as ct                         LEFT JOIN __users as u ON u.id=ct.user_id                        WHERE 1 $topic_id $parent_id ORDER BY ct.create_date DESC $sql_limit";            $this->db->query($query);            return $this->db->results();        }        public function get_comments_users($filter)        {            if(isset($filter['topic_id']))                $topic_id = $this->db->placehold('AND ct.topic_id=?', intval($filter['topic_id']));            $query = /** @lang text */                "SELECT ct.id, ct.parent_id, ct.topic_id, ct.user_id, ct.text, ct.create_date, u.image, u.username, u.surname, u.lastname                    FROM __communitys_topic_comment as ct                     LEFT JOIN __users as u ON u.id=ct.user_id                    WHERE 1 $topic_id GROUP BY ct.user_id ORDER BY ct.id DESC";            $this->db->query($query);            return $this->db->results();        }        public function tree_comments($filter){            $filter['parent_id'] = 0;            $comments = $this->getComments($filter);            if(empty($comments))                return false;            krsort($comments);            foreach($comments as $comment)            {                $result[$comment->parent_id][$comment->id] = $comment;            }            foreach($result[0] as &$comment)            {                $filter['parent_id'] = $comment->id;                $sub_comments = $this->getComments($filter);                krsort($sub_comments);                $comment->sub_coments = $sub_comments;            }            return $comments;        }        public function add_topic($topic)        {            if($this->db->query("INSERT INTO __communitys_topic SET ?%", $topic))            {                $id = $this->db->insert_id();                /*$this->db->query("UPDATE __products SET position=id WHERE id=?", $id);*/                return $id;            }            else                return false;        }        public function get_files($id)        {            if (file_exists($this->config->topics_dir.$id)){                $files = scandir($this->config->topics_dir.$id);                $new_files = [];                foreach($files as $key =>$filename)                {                    $new_file = new \stdClass();                    if($key>1)                    {                        $new_file->name = $filename;                        $new_file->size = $this->files->FileSizeConvert(filesize($this->config->topics_dir.$id.'/'.$filename));                        $type_file = new \SplFileInfo($filename);                        $new_file->type = $type_file->getExtension();                        $new_files[]= $new_file;                    }                }                return $new_files;            }            return false;        }        public function add_files($topic_id)        {            if(isset($_FILES['files']['tmp_name']))            {                $dir = $this->config->root_dir.'/'.$this->config->topics_dir.$topic_id.'/';                if (!file_exists($dir))                    mkdir($dir, 0777);                for($index=0; $index<count($_FILES['files']['tmp_name']); $index++)                {                    $attachment_tmp_name = $_FILES['files']['tmp_name'][$index];                    $attachment_name = $_FILES['files']['name'][$index];                    $i=1;                    while(file_exists($dir.$attachment_name)){                        $attachment_name = $i."_".$attachment_name;                        $i++;                    }                    move_uploaded_file($attachment_tmp_name, $dir.$attachment_name);                }                return true;                // Загрузить файлы            }            return false;        }        public function get_rules($id=0){            $rule = 'user';            if($id==1)                $rule='admin';            switch ($rule){                case 'admin':                        $result = ['votes'=>true, 'topic_delete'=>true, 'topic_edit'=>true, 'comment_edit'=>true,                            'comment_delete'=>true, 'user_delete'=>true, 'user_update'=>true];                    break;                case 'user':                    $result = ['votes'=>false];                    break;                default:                    $result = ['votes'=>false];            }            return $result;        }    }}